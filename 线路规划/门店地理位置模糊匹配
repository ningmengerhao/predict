# %%
from itertools import groupby
import time
from sklearn.neighbors import NearestNeighbors
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
# %%
fuzz.ratio('this is a shot', 'this is a shat')
fuzz.partial_ratio('this is a shot', 'this is o shot')
fuzz.token_sort_ratio('我是谁？我在哪？', '我在哪？我是谁?')
fuzz.token_set_ratio('this is a shot', 'this is is a shot')

choices = ["Atlanta Falcons", "New York Jets",
           "New York Giants", "Dallas Cowboys"]
process.extract("New York Jets", choices, limit=2)

process.extractOne('Cow', choices)

# %%
clean_org_names = pd.read_excel('Gov Orgs ONS.xlsx')
clean_org_names = clean_org_names.iloc[:, 0:6]
org_name_clean = clean_org_names['Institutions'].unique()
print('Vecorizing the data - this could take a few minutes for largedatasets...')
vectorizer = TfidfVectorizer(min_df=1, analyzer=ngrams, lowercase=False)
tfidf = vectorizer.fit_transform(org_name_clean)
print('Vecorizing completed...')
nbrs = NearestNeighbors(n_neighbors=1, n_jobs=-1).fit(tfidf)
org_column = 'buyer'  # column to match against in the messy data
# set used for increased performance
unique_org = set(names[org_column].values)
# matching query:


def getNearestN(query):
    queryTFIDF_ = vectorizer.transform(query)
    distances, indices = nbrs.kneighbors(queryTFIDF_)
    return distances, indices


t1 = time.time()
print('getting nearest n...')
distances, indices = getNearestN(unique_org)
t = time.time()-t1
print("COMPLETED IN:", t)
unique_org = list(unique_org)  # need to convert back to a list
print('finding matches...')
matches = []
for i, j in enumerate(indices):
    temp = [round(distances[i][0], 2), clean_org_names.values[j]
            [0][0], unique_org[i]]
    matches.append(temp)
print('Building data frame...')
matches = pd.DataFrame(matches, columns=[
                       'Match confidence (lower isbetter)', 'Matched name', 'Origional name'])
print('Done')
